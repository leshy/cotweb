{"version":3,"file":"cotwebsocket.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["//@ts-ignore\nimport { appCore, configSystem } from 'lsh-foundation'\nimport * as path from 'path'\nimport express from \"express\";\nimport { createServer } from \"http\";\nimport engine from 'engine.io';\n//@ts-ignore\nconst createError = require('http-errors');\n\nconst root = path.join(__dirname, '../')\n\ntype Config = configSystem.AppConfig & {\n  apiKey: string\n}\n\nexport const init = async () => {\n  const { logger, config } = await appCore.init<Config>({\n    name: 'cot-websocket',\n    configDir: path.join(root, 'config'),\n    verbose: true,\n    defaultConfig: {}\n  })\n\n  const app = express();\n  const httpServer = createServer(app);\n\n\n  app.set('views', path.join(config.rootDir, 'web/views'));\n  app.set('view engine', 'ejs');\n\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: false }));\n  app.use(express.static(path.join(config.rootDir, 'web/static')));\n\n  app.get('/', function(req, res, next) {\n    res.render('index', { title: 'Express' });\n  });\n\n  // catch 404 and forward to error handler\n  app.use(function(req, res, next) {\n    next(createError(404));\n  });\n\n  //@ts-ignore\n  app.use(function(err, req, res, next) {\n    // set locals, only providing error in development\n    res.locals.message = err.message;\n    console.log(config)\n    //@ts-ignore\n    res.locals.error = config.env === configSystem.Env.dev ? err : {};\n    // render the error page\n    res.status(err.status || 500);\n    res.render('error');\n  });\n\n\n  app.get('/', (req, res) => {\n    res.send('Hello World!')\n  })\n\n  const sockets = engine.attach(httpServer, {})\n  // @ts-ignore\n  sockets.on('connection', (socket) => {\n    console.log('connected')\n    socket.send('hello')\n    // @ts-ignore\n    socket.on('message', (data) => {\n      console.log(data)\n      // @ts-ignore\n      socket.on('close', () => { });\n    })\n  })\n\n  httpServer.listen(3001)\n\n\n\n}\n\ninit()\n"],"names":["createError","require","root","path","join","__dirname","init","async","config","appCore","name","configDir","verbose","defaultConfig","app","express","httpServer","createServer","set","rootDir","use","json","urlencoded","extended","static","get","req","res","next","render","title","err","locals","message","console","log","error","env","configSystem","Env","dev","status","send","engine","attach","on","socket","data","listen"],"mappings":"mbAOA,MAAMA,EAAcC,QAAQ,eAEtBC,EAAOC,EAAKC,KAAKC,UAAW,OAMrBC,EAAOC,UAClB,MAAcC,OAAEA,SAAiBC,EAAOA,QAACH,KAAa,CACpDI,KAAM,gBACNC,UAAWR,EAAKC,KAAKF,EAAM,UAC3BU,SAAS,EACTC,cAAe,CAAE,IAGbC,EAAMC,IACNC,EAAaC,eAAaH,GAGhCA,EAAII,IAAI,QAASf,EAAKC,KAAKI,EAAOW,QAAS,cAC3CL,EAAII,IAAI,cAAe,OAEvBJ,EAAIM,IAAIL,EAAQM,QAChBP,EAAIM,IAAIL,EAAQO,WAAW,CAAEC,UAAU,KACvCT,EAAIM,IAAIL,EAAQS,OAAOrB,EAAKC,KAAKI,EAAOW,QAAS,gBAEjDL,EAAIW,IAAI,KAAK,SAASC,EAAKC,EAAKC,GAC9BD,EAAIE,OAAO,QAAS,CAAEC,MAAO,WAC/B,IAGAhB,EAAIM,KAAI,SAASM,EAAKC,EAAKC,GACzBA,EAAK5B,EAAY,KACnB,IAGAc,EAAIM,KAAI,SAASW,EAAKL,EAAKC,EAAKC,GAE9BD,EAAIK,OAAOC,QAAUF,EAAIE,QACzBC,QAAQC,IAAI3B,GAEZmB,EAAIK,OAAOI,MAAQ5B,EAAO6B,MAAQC,EAAYA,aAACC,IAAIC,IAAMT,EAAM,GAE/DJ,EAAIc,OAAOV,EAAIU,QAAU,KACzBd,EAAIE,OAAO,QACb,IAGAf,EAAIW,IAAI,KAAK,CAACC,EAAKC,KACjBA,EAAIe,KAAK,eAAe,IAGVC,EAAOC,OAAO5B,EAAY,CAAE,GAEpC6B,GAAG,cAAeC,IACxBZ,QAAQC,IAAI,aAEZW,EAAOD,GAAG,WAAYE,IACpBb,QAAQC,IAAIY,GAEZD,EAAOD,GAAG,SAAS,QAAU,GAC7B,IAGJ7B,EAAWgC,OAAO,KAAK,EAMzB1C"}